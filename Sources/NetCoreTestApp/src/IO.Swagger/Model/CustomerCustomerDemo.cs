/* 
 * ToDo API
 *
 * A simple example ASP.NET Core Web API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CustomerCustomerDemo
    /// </summary>
    [DataContract]
    public partial class CustomerCustomerDemo :  IEquatable<CustomerCustomerDemo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerCustomerDemo" /> class.
        /// </summary>
        /// <param name="CustomerId">CustomerId.</param>
        /// <param name="CustomerTypeId">CustomerTypeId.</param>
        /// <param name="Customer">Customer.</param>
        /// <param name="CustomerType">CustomerType.</param>
        public CustomerCustomerDemo(string CustomerId = default(string), string CustomerTypeId = default(string), Customers Customer = default(Customers), CustomerDemographics CustomerType = default(CustomerDemographics))
        {
            this.CustomerId = CustomerId;
            this.CustomerTypeId = CustomerTypeId;
            this.Customer = Customer;
            this.CustomerType = CustomerType;
        }
        
        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name="customerId", EmitDefaultValue=false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Gets or Sets CustomerTypeId
        /// </summary>
        [DataMember(Name="customerTypeId", EmitDefaultValue=false)]
        public string CustomerTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer", EmitDefaultValue=false)]
        public Customers Customer { get; set; }

        /// <summary>
        /// Gets or Sets CustomerType
        /// </summary>
        [DataMember(Name="customerType", EmitDefaultValue=false)]
        public CustomerDemographics CustomerType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerCustomerDemo {\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  CustomerTypeId: ").Append(CustomerTypeId).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  CustomerType: ").Append(CustomerType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerCustomerDemo);
        }

        /// <summary>
        /// Returns true if CustomerCustomerDemo instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerCustomerDemo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerCustomerDemo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.CustomerTypeId == input.CustomerTypeId ||
                    (this.CustomerTypeId != null &&
                    this.CustomerTypeId.Equals(input.CustomerTypeId))
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.CustomerType == input.CustomerType ||
                    (this.CustomerType != null &&
                    this.CustomerType.Equals(input.CustomerType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.CustomerTypeId != null)
                    hashCode = hashCode * 59 + this.CustomerTypeId.GetHashCode();
                if (this.Customer != null)
                    hashCode = hashCode * 59 + this.Customer.GetHashCode();
                if (this.CustomerType != null)
                    hashCode = hashCode * 59 + this.CustomerType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
