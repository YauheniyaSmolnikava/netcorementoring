/* 
 * ToDo API
 *
 * A simple example ASP.NET Core Web API
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CustomerDemographics
    /// </summary>
    [DataContract]
    public partial class CustomerDemographics :  IEquatable<CustomerDemographics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerDemographics" /> class.
        /// </summary>
        /// <param name="CustomerTypeId">CustomerTypeId.</param>
        /// <param name="CustomerDesc">CustomerDesc.</param>
        /// <param name="CustomerCustomerDemo">CustomerCustomerDemo.</param>
        public CustomerDemographics(string CustomerTypeId = default(string), string CustomerDesc = default(string), List<CustomerCustomerDemo> CustomerCustomerDemo = default(List<CustomerCustomerDemo>))
        {
            this.CustomerTypeId = CustomerTypeId;
            this.CustomerDesc = CustomerDesc;
            this.CustomerCustomerDemo = CustomerCustomerDemo;
        }
        
        /// <summary>
        /// Gets or Sets CustomerTypeId
        /// </summary>
        [DataMember(Name="customerTypeId", EmitDefaultValue=false)]
        public string CustomerTypeId { get; set; }

        /// <summary>
        /// Gets or Sets CustomerDesc
        /// </summary>
        [DataMember(Name="customerDesc", EmitDefaultValue=false)]
        public string CustomerDesc { get; set; }

        /// <summary>
        /// Gets or Sets CustomerCustomerDemo
        /// </summary>
        [DataMember(Name="customerCustomerDemo", EmitDefaultValue=false)]
        public List<CustomerCustomerDemo> CustomerCustomerDemo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerDemographics {\n");
            sb.Append("  CustomerTypeId: ").Append(CustomerTypeId).Append("\n");
            sb.Append("  CustomerDesc: ").Append(CustomerDesc).Append("\n");
            sb.Append("  CustomerCustomerDemo: ").Append(CustomerCustomerDemo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerDemographics);
        }

        /// <summary>
        /// Returns true if CustomerDemographics instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerDemographics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerDemographics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomerTypeId == input.CustomerTypeId ||
                    (this.CustomerTypeId != null &&
                    this.CustomerTypeId.Equals(input.CustomerTypeId))
                ) && 
                (
                    this.CustomerDesc == input.CustomerDesc ||
                    (this.CustomerDesc != null &&
                    this.CustomerDesc.Equals(input.CustomerDesc))
                ) && 
                (
                    this.CustomerCustomerDemo == input.CustomerCustomerDemo ||
                    this.CustomerCustomerDemo != null &&
                    this.CustomerCustomerDemo.SequenceEqual(input.CustomerCustomerDemo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerTypeId != null)
                    hashCode = hashCode * 59 + this.CustomerTypeId.GetHashCode();
                if (this.CustomerDesc != null)
                    hashCode = hashCode * 59 + this.CustomerDesc.GetHashCode();
                if (this.CustomerCustomerDemo != null)
                    hashCode = hashCode * 59 + this.CustomerCustomerDemo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
